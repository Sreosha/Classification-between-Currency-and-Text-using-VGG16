# -*- coding: utf-8 -*-
"""VGG!^.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18_X1CKJlh8R03GhMyeYVsYIF0mPNdHd6
"""

import keras,os
from keras.models import Sequential
from keras.layers import Dense, Conv2D, MaxPool2D , Flatten
from keras.preprocessing.image import ImageDataGenerator
import numpy as np
import tensorflow

!unzip '/content/drive/MyDrive/Dataset (1).zip'

trdata=ImageDataGenerator()
traindata=trdata.flow_from_directory(directory="/content/Dataset/Dataset/Train",target_size=(224,224))

from google.colab import drive
drive.mount('/content/drive')

tsdata=ImageDataGenerator()
testdata=tsdata.flow_from_directory(directory="/content/Dataset/Dataset/Train",target_size=(224,224))

testdata.class_indices

VGG=tensorflow.keras.applications.VGG16(input_shape=(224,224,3),
                             include_top=False,
                             weights='imagenet')

VGG.trainable=False

model=keras.Sequential(
    [VGG,
     keras.layers.Flatten(),
     keras.layers.Dense(units=256,activation='relu'),
     keras.layers.Dense(units=256,activation='relu'),
     keras.layers.Dense(units=3,activation='softmax')
    ]
)

model.compile(optimizer='adam',loss=keras.losses.categorical_crossentropy, metrics=['accuracy'])

model.summary()

hist=model.fit_generator(
                         generator=traindata,
                         validation_data=testdata,
                         validation_steps=10,
                         epochs=2)

import matplotlib.pyplot as plt

# Summarize history for accuracy

plt.plot(hist.history['accuracy'])
plt.plot(hist.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()
# summarize history for loss
plt.plot(hist.history['loss'])
plt.plot(hist.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

model.save('vgg.h5')

import cv2
img=cv2.imread('/content/Dataset/Dataset/Val/Metal_Currency/rupee5_183.JPG')

#img=np.array(img)
img.shape

img=cv2.resize(img,(224,224))
img.shape

import matplotlib.pyplot as plt

plt.imshow(img)

from tensorflow.keras.models import load_model

saved_model=load_model('vgg.h5')

img = np.reshape(img,[1,224,224,3])

out=saved_model.predict(img)

if out[0][0]>out[0][1] and out[0][0]>out[0][2]:
  print("Metal Currency")
elif out[0][1]>out[0][0] and out[0][1]>out[0][2] :
  print("Paper Currency")
else:
  print("Text")